/**
 *
 * 01. Create an interface with only one method and implement it in a class. Call the method
 * implemented.
 */
package com.nm.interfaces;

//An interface is declared by using the interface keyword.
interface nm_01 {
    //An abstract method doesn't have its body, and they are public and abstract
    void oneMethod();
}

public class InterfaceOneMethod implements nm_01 {
    @Override
    public void oneMethod() {
        System.out.println("This is a method");
    }

    public static void main(String[] args) {
        InterfaceOneMethod if1 = new InterfaceOneMethod();
        //Calling the method implemented
        if1.oneMethod();
    }
}


/**
 *
 * 02. Create an interface with two methods, but implement only one in a class. Call the
 * method implemented.
 */

interface nm_02 {
    void methodOne();

    void methodTwo();
}

public class InterfaceTwoMethod implements nm_02 {
    //cannot implement only one method in a class
    @Override
    public void methodOne() {
        System.out.println("First Method");
    }

    @Override
    public void methodTwo() {
        System.out.println("Second Method");
    }

    //main method
    public static void main(String[] args) {
        InterfaceTwoMethod if2 = new InterfaceTwoMethod();
        //Calling the methods implemented
        if2.methodOne();
        if2.methodTwo();
    }
    /*
   NOTE :
   - A class that implements an interface must implement all the methods declared in the interface.
    */
}

/**
*
*03.Use Interface instances to call the implemented method in the implemented class
*/
interface Printable {
    print(): void;
}

// Implement the interface in a class
class Printer implements Printable {
    print(): void {
        console.log("Printing...");
    }
}

// Create an instance of the implementing class
const printerInstance = new Printer();

// Create an interface instance pointing to the implementing class instance
const printableInstance: Printable = printerInstance;

// Call the implemented method using the interface instance
printableInstance.print();


/**
 *
 * 04.Create two interfaces with one method each. Implement these two interfaces in one
 * class.
 */

//interface 1
interface nm_4 {
    void methodOne();
}

//interface 2
interface nm_04 {
    void methodTwo();
}

//Implemented these two interfaces in one class
public class TwoInterfaceOneMethod implements nm_4, nm_04 {
    @Override
    public void methodOne() {
        System.out.println("This is Method one");
    }

    @Override
    public void methodTwo() {
        System.out.println("This is Method two");
    }

    //main method
    public static void main(String[] args) {
        TwoInterfaceOneMethod if4 = new TwoInterfaceOneMethod();
        //Calling the methods implemented
        if4.methodOne();
        if4.methodTwo();
    }
}



/**
 *
 * 05. Create two interfaces with the same method (same signature) in both the interfaces.
 * Implement these two interfaces in one class. Call the method.
 */

//interface 1
interface nm_5 {
    void sameMethod();
}

//interface 2
interface nm_05 {
    void sameMethod();
}

//Implemented these two interfaces in one class
class TwoInterfaceSameMethod implements nm_5, nm_05 {
    @Override
    public void sameMethod() {
        System.out.println("This is same method in both the interfaces");
    }

    //main method
    public static void main(String[] args) {
        TwoInterfaceSameMethod if5 = new TwoInterfaceSameMethod();
        if5.sameMethod();
    }
}


/*
 *
 * 06. Create an interface with a default method and implement it in a class. Do not provide
 * implementation to the default method and call the method.
 */
//interface
interface nm_06 {
    //default method
    default void defaultMethod() {
        System.out.println("This is a default method");
    }
}

class InterfaceDefaultMethod implements nm_06 {
    public static void main(String[] args) {
        //Didn't provide implementation to the default method
        InterfaceDefaultMethod if6 = new InterfaceDefaultMethod();
        //Calling the method
        if6.defaultMethod();
    }
}


/**
 *
 * 07. Create an interface and inherit it from the other interface.
 */
//interface
interface nm_7 {
    void methodOne();
}

//inherited interface
interface nm_07 extends nm_7 {
    void methodTwo();
}

class InheritedInterface implements nm_07 {
    //override method of interface nm_7
    @Override
    public void methodOne() {
        System.out.println("This is first method");
    }
    //override method of inherited interface nm_07
    @Override
    public void methodTwo() {
        System.out.println("This is second method");
    }

    public static void main(String[] args) {
        //creating obj of InheritedInterface
        InheritedInterface if7 = new InheritedInterface();
        //Calling the methods implemented
        if7.methodOne();
        if7.methodTwo();
    }
}

/**
 *
 * 08. Create a PUBLIC interface with fields and methods, fields should have values assigned.
 * Implement this interface to some class and print the values of the interface fields and
 * call the interface methods
 */

//public interface with fields and methods
public interface InterfacePublicFieldsMethod {
    //all the fields are public, static and final by default
    int num = 111; //values assigned

    public void myMethod();
}

//Implemented interface to a class
class Jala_08 implements InterfacePublicFieldsMethod {
    @Override
    public void myMethod() {
        System.out.println("This is a method");
    }

    //main method
    public static void main(String[] args) {
        Jala_08 j = new Jala_08();
        //printing the values of the interface fields
        System.out.println(num);
        //calling the interface methods
        j.myMethod();
    }
}


/**
 *
 * 09. Create a PRIVATE or PROTECTED interface and print the values as above scenario
 * 10. Create an interface with private, public and protected fields
 * 11.  Create an interface with static final variable
 */

interface nm_09 {

    public int num1 = 11;
    static final int num2 = 22;
    final int num3 = 33;
    // private int num4 = 44;  - error
    // protected int num5 = 55; - error
}

class InterfacePrivateProtected implements nm_09 {

    public static void main(String[] args) {
        InterfacePrivateProtected if9 = new InterfacePrivateProtected();
        System.out.println(if9.num1 + " " + if9.num2);
    }
/* NOTE :
1. Interface in Java is similar to class but, it contains only abstract methods and
   fields which are final and static.

2. If the members of the interface are private you cannot provide implementation to
   the methods or, cannot access the fields of it in the implementing class.

3. The protected members can be accessed in the same class or,the class inheriting it.
   But, we do not inherit an interface we will implement it.

 */
}

