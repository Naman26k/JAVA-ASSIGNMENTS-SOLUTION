/**
 * 1. Write a function for arithmetic operators(+,-,*,/).
 */
package com.NM.operators;

/* Java arithmetic operators are used to perform addition, subtraction,
    multiplication, and division. They act as basic mathematical operations. */
public class Arithmetic {

    static void addition(int a, int b) {
        int add = a + b;
        System.out.println("Addition of a + b = " + add);
    }

    static void subtraction(int a, int b) {
        int sub = a - b;
        System.out.println("Subtraction of a - b = " + sub);
    }

    static void multiplication(int a, int b) {
        int mul = a * b;
        System.out.println("Multiplication of a * b = " + mul);
    }

    static void division(int a, int b) {
        int div = a / b;
        System.out.println("Division of a / b = " + div);
    }

    public static void main(String[] args) {
        int a = 10;
        int b = 0;
        //calling methods
        addition(a, b);
        subtraction(a, b);
        multiplication(a, b);
        division(a, b);
    }
}

/**
 
 * 2. Write a method for increment and decrement operators(++, --)
 */

public class IncrementDecrement {

    /* Increment Operator :	++	(++a or a++)
    It increments the value of a variable by 1.	*/
    static void preIncrement(int a, int b) {
        int d;                  //First the value of a is incremented to 11
        d = b + (++a);          //Then b is added to 11 to get 16
        System.out.println("Values after Pre-Increment a,b : " + a + "," + d);//a=11,b=16
    }

    static void postIncrement(int a, int b) {
        int d;                  //first the value of a is added to b to get 15
        d = b + (a++);          //Then after execution, a is incremented to 11
        System.out.println("Values after Post-Increment a,b : " + a + "," + d);//a=11,b=15
    }

    /* Decrement Operator :	--	(--a or a--)
        It decrements the value of a variable by 1.	*/
    static void preDecrement(int a, int b) {
        int d;                  //First the value of a is decremented to 9
        d = b + (--a);          //Then b is added to 9 to get 14
        System.out.println("Values after Pre-Decrement a,b : " + a + "," + d);//a=9,b=14
    }

    static void postDecrement(int a, int b) {
        int d;                  //first the value of a is added to b to get 15
        d = b + (a--);          //Then after execution, a is Decremented to 9
        System.out.println("Values after Post-Decrement a,b : " + a + "," + d);//a=9,b=15
    }

    public static void main(String[] args) {
        int a = 10;
        int b = 5;
        preIncrement(a, b);
        postIncrement(a, b);
        preDecrement(a, b);
        postDecrement(a, b);
    }
}

/**
 * 3. Program to equal operator and not equal operators
 * 4. Write a program to find the two numbers equal or not.
 */

import java.util.Scanner;

public class Equal_NotEqual {

    public static void main(String[] args) {
        /* To get the instance of Java Scanner which reads input from the user,
         we need to pass the input stream (System.in) in the constructor of Scanner class. */
        Scanner num = new Scanner(System.in);
        System.out.print("Enter first number : ");
        // "nextInt()" scans the next token of the input as an Int.
        int a = num.nextInt();
        System.out.print("Enter second number : ");
        int b = num.nextInt();
        //equal operator (==)
        if (a == b) {
            System.out.println("Both are numbers equal");
        }
        //not equal operator (!=)
        else if (a != b) {
            System.out.println("Both are numbers different");
        }
    }
}

/**

 * 5. Programs on Logical AND,OR operator and Logical NOT
 */

public class Logical {
    public static void main(String[] args) {
        int a = 15;
        int b = 10;
        int c = 5;
        // Logical AND (&&)
        /* The logical && operator doesn't check the second condition if the
        first condition is false. It checks the second condition only if the first one is true. */
        System.out.println(a > b && a > c); // true  && true  = true
        System.out.println(a < b && a < c); // false && false = false
        System.out.println(a > b && a < c); // true  && false = false

        //Logical OR (||)
        /* The logical || operator doesn't check the second condition if the
        first condition is true.It checks the second condition only if the first one is false. */
        System.out.println(a > b || a > c); // true  || true  = true
        System.out.println(a < b || a < c); // false || false = false
        System.out.println(a < b || a > c); // false || true  = true

        //Logical NOT [!()]
        System.out.println(!(a > b));      // NOT true = false
        System.out.println(!(a < b));      // NOT false = true
    }
}

/**
 * 6. Program for relational operators (<,<==, >, >==)
 */

public class Relational {
    public static void main(String[] args) {
        int a = 15;
        int b = 10;
        System.out.println(a < b);  //less than ( < )
        System.out.println(a > b);  //greater than ( > )
        System.out.println(a <= b); //less than or equals( <= )
        System.out.println(a >= b); //greater than or equals( >= )
    }
}

/**
 * 7. Print the smaller and larger number
 */

public class LargerSmallerNumbers {
    public static void main(String[] args) {
        int a = 5;
        int b = 10;
        // Java Ternary operators(?,:) is used as one line replacement for if and else statement
        int min = (a<b)?a:b;
        int max = (a>b)?a:b;
        System.out.println("Smaller Number is " + min);
        System.out.println("Larger Number is " + max);

        //Same logic with if and else statements takes more lines to code
        if (a > b) {
            System.out.println("Larger Number is " + a);
        } else {
            System.out.println("Smaller Number is " + a);
        }
        if (b > a) {
            System.out.println("Larger Number is " + b);
        } else {
            System.out.println("Smaller Number is " + b);
        }
    }
}
