/**
 *
 * 1. Write a program to generate Arithmetic Exception without exception handling
 * 2. Handle the Arithmetic exception using try-catch block
 */
package com.nm.exceptions;

// ArithmeticException is thrown when an exceptional condition has occurred in an arithmetic operation.
public class ArithmeticExceptionTryCatch {

    public static void main(String[] args) {
        int a = 10, b = 0, c;
        try {
            System.out.println("Inside try block");
            //below code throws divide by zero exception
            c = a / b;
            System.out.println("c = " + c);
        }
        //2. handles the Arithmetic Exception
        catch (java.lang.ArithmeticException e) {
            System.out.println("Handling the Arithmetic exception using try-catch block");
        }

        //1. generating Arithmetic Exception without exception handling
        c = a / b;
        System.out.println("without exception handling");
    }
}

/**y
 *
 * 3.Write a method which throws exception, Call that method in main class without try block
 */
/* We can throw either checked or unchecked exceptions in Java by throw keyword.
It is mainly used to throw a custom exception. */
public class MethodThrowsException {
    static void throwException() {
        //throw keyword is used to invoke an exception explicitly.
        throw new RuntimeException("Throwing exception");
    }

    public static void main(String[] args) {
        //Calling method in main class without try block
        throwException();
    }
}


/**
 *
 * 4. Write a program with multiple catch blocks
 * 5. Write a program to throw exception with your own message
 */
/* if you have to perform different tasks at the occurrence of different exceptions,
 use java multi-catch block. */
public class MultipleCatchBlocks {

    public static void main(String[] args) {
        //try block can be followed by one or more catch blocks.
        try {
            int[] a = new int[6];
            //Arithmetic Exception
            a[6] = 10 / 0;
            //ArrayIndexOutOfBounds Exception
            System.out.println(a[10]);
        }
        // Multiple catch blocks
        //Each catch block must contain a different exception handler.
        catch (ArithmeticException e) {
            //throwing exception with your own message
            System.out.println("Arithmetic Exception occurs");
            e.getStackTrace();
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("ArrayIndexOutOfBounds Exception occurs");
            e.getStackTrace();
        } catch (Exception e) {
            System.out.println("Parent Exception occurs");
            e.getStackTrace();
        }
        System.out.println("Main method ended");
    }
    /*
 NOTE :
    1.Try block contains two exceptions. But at a time only one exception occurs
    and its corresponding catch block is executed.
 */
}

/**

 *
 * 6. Write a program to create your own exception
 */

//custom exception class always extends directly from the Exception class
class InvalidExamException extends Exception {
    InvalidExamException(String msg) {
        System.out.println(msg);
    }
}

//creating our own exception
public class CreateOwnException {

    //creating a method which receives integer as parameter
    static void exam(int marks) throws InvalidExamException {
        // throws exception if marks are less than 40
        if (marks < 40) {
            //InvalidExamException is our own custom exception
            throw new InvalidExamException("Failed in exam");
        } else {
            System.out.println("Passed in exam");
        }
    }

    public static void main(String[] args) {
        try {
            //passing marks to the method
            exam(39);
        } catch (Exception i) {
            /* printStackTrace() prints the throwable Exception object as well as with other Information
            like the line number where Exception occurs and class name where the exception occurred.*/
            i.printStackTrace();
        }
    }
}


/**
 *
 * 7.Write a program with finally block
 */
/* "Finally" Block contains all the necessary statements that need to be
    printed regardless of the exception occurs or not. */
public class FinallyBlock {

    public static void main(String args[]) {
        try {
            //below code throws divide by zero exception
            int data = 10 / 0;
            System.out.println(data);
        }
        //handles the Arithmetic Exception / Divide by zero exception
        catch (ArithmeticException e) {
            System.out.println("Exception handled");
            e.printStackTrace();
        }
        //finally block executes regardless of exception occurred or not
        finally {
            System.out.println("finally block is always executed");
        }
        System.out.println("Main method ended");
    }
}


/**

 *
 * 8. Write a program to generate Arithmetic Exception
 */
// ArithmeticException is thrown when an exceptional condition has occurred in an arithmetic operation.
public class GenerateArithmeticException {

    public static void main(String[] args) {
        int a = 10, b = 0, c;
        try {
            //below code throws divide by zero exception
            c = a / b;

            //handles the Arithmetic Exception / Divide by zero exception
        } catch (ArithmeticException e) {
            System.err.println("ArithmeticException caught!");
            /* printStackTrace() prints the throwable Exception object as well as with other Information
            like the line number where Exception occurs and class name where the exception occurred.*/
            e.printStackTrace();
        }
    }
}


/**
 *
 * 9. Write a program to generate ArrayIndexOutOfBoundException
 */
/*
ArrayIndexOutOfBoundsException :
It is thrown to indicate that an array has been accessed with an illegal index.
The index is either negative or greater than or equal to the size of the array.
 */
public class ArrayIndexOutOfBound {

    public static void main(String[] args) {
        //Declaring 4 elements in the String array
        String[] arr = {"Sharan", "Rahul", "Leo", "Arun"};
        //ArrayIndexOutOfBoundException because there is no 5th index
        try {
            System.out.println(arr[5]);
        }
        catch (ArrayIndexOutOfBoundsException e){
            System.err.println("ArrayIndexOutOfBoundsException caught");
            /* printStackTrace() prints the throwable Exception object as well as with other Information
            like the line number where Exception occurs and class name where the exception occurred.*/
            e.printStackTrace();
        }
    }
}


/**
 *
 * 10.Write a program to generate ClassNotFoundException
 */

/* Java ClassNotFoundException occurs when the application tries to load
   a class but Classloader is not able to find it in the classpath.*/
public class ClassNotFound {

    public static void main(String[] args) {

        try {
            Class.forName("com.exceptions.jala");
            ClassLoader.getSystemClassLoader().loadClass("com.exceptions.jala");

        } catch (ClassNotFoundException e) {
            /* printStackTrace() prints the throwable Exception object as well as with other Information
            like the line number where Exception occurs and class name where the exception occurred.*/
            e.printStackTrace();
        }
    }
}

/**
 *
 * 11.Write a program to generate FileNotFoundException
 */

import java.io.*;

// FileNotFoundException occurs when we attempt to open the file denoted by a specified pathname has failed.
public class FileNotFound {
    public static void main(String[] args) {

        try {
            // create instance of the BufferedReader and pass the FileReader instance to it.
            BufferedReader reader = new BufferedReader(new FileReader(new File("/invalid/file/location")));
        }
        //FileNotFoundException is a subclass of IOException.
        catch (FileNotFoundException e) {
            System.err.println("FileNotFoundException caught!");
            /* printStackTrace() prints the throwable Exception object as well as with other Information
            like the line number where Exception occurs and class name where the exception occurred.*/
            e.printStackTrace();
        }
    }
}


/**
 *
 * 12. Write a program to generate IOException
 */

import java.io.*;

//IOExceptions are thrown when there is any input / output file operation issues
public class GenerateIOException {
    public static void main(String[] args) {

        File file = new File("test.txt");
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(file);
            fis.read();
            fis.close();
        }
        //FileNotFoundException is a subclass of IOException.
        catch (IOException e) {
            /* printStackTrace() prints the throwable Exception object as well as with other Information
            like the line number where Exception occurs and class name where the exception occurred.*/
            e.printStackTrace();
        }
    }
}


/**
 *
 * 13.Write a program to generate NoSuchFieldException
 */
public class NoSuchFieldExceptionExample {
    // Define a class with a field
    static class MyClass {
        int myField;
    }

    public static void main(String[] args) {
        try {
            // Attempt to access a non-existent field
            MyClass obj = new MyClass();
            int fieldValue = obj.nonExistentField;
        } catch (NoSuchFieldException e) {
            // Handle the exception
            System.err.println("NoSuchFieldException caught: " + e.getMessage());
        }
    }
}


/**
 *
 * 14.Write a program to generate NoSuchMethodException
 */

import java.lang.reflect.Method;
//creating a class
class E_14 {
    //creating a method which receives two integer values as parameters
    public void addition(int a, int b) {
        int c;
        c = a + b;
        System.out.println(c);
    }
}

public class NoSuchMethod {
    public static void main(String[] args) {

        try {
            Class c = Class.forName("com.jala.exceptions.E_14");
            //There is no subtraction() method in class E_14
            Method m = c.getDeclaredMethod("subtraction", int.class, int.class);
        }
        //Throws NoSuchMethodException
        catch (NoSuchMethodException | ClassNotFoundException e) {
            /* printStackTrace() prints the throwable Exception object as well as with other Information
            like the line number where Exception occurs and class name where the exception occurred.*/
            e.printStackTrace();
        }
    }
}


/**
 *
 * 15.Write a program to generate NullPointerException
 */
/* NullPointerException :
This exception is raised when referring to the members of a null object. Null represents nothing */
public class NullPointer {
    //we are trying to perform the length() operation on str which is null
    static void simpleNullCheck(String str) {
        System.out.println(str.length());
    }

    public static void main(String args[]) {

        String input = null;
        try {
            simpleNullCheck(input);
        } catch (NullPointerException e) {
            System.out.println("NullPointerException caught!");
            /* printStackTrace() prints the throwable Exception object as well as with other Information
            like the line number where Exception occurs and class name where the exception occurred.*/
            e.printStackTrace();
        }
    }
}


/**
 *
 * 16. Write a program to generate NumberFormatException
 */
/* NumberFormatException :
This exception is raised when a method could not convert a string into a numeric format. */
public class NumberFormat {
    public static void main(String[] args) {

        String str = "111ABC";
        try {
            // Converting string with inappropriate format
            int x = Integer.parseInt(str);
            int y = Integer.valueOf(str);
        } catch (NumberFormatException e) {
            System.err.println("NumberFormatException caught!");
            /* printStackTrace() prints the throwable Exception object as well as with other Information
            like the line number where Exception occurs and class name where the exception occurred.*/
            e.printStackTrace();
        }
    }
}


/**
 *
 * 17. Write a program to generate StringIndexOutOfBoundsException
 */
/* StringIndexOutOfBoundsException :
It is thrown by String class methods to indicate that an index is
either negative or greater than the size of the string */
public class StringIndexOutOfBonds {
    public static void main(String[] args) {

        String str = "Sharan";
        try {
            // Trying to access at negative index
            char charAtNegativeIndex = str.charAt(-1);
            // Trying to access at index equal to size of the string
            char charAtLengthIndex = str.charAt(11);
        } catch (StringIndexOutOfBoundsException e) {
            System.err.println("StringIndexOutOfBoundsException caught");
            /* printStackTrace() prints the throwable Exception object as well as with other Information
            like the line number where Exception occurs and class name where the exception occurred.*/
            e.printStackTrace();
        }
    }
}


/**
 *
 * 18. Write a program to generate StringIndexOutOfBoundsException
 */
import java.sql.*;

public class SQLExceptionExample {
    public static void main(String[] args) {
        // Define database connection parameters
        String url = "jdbc:mysql://localhost:3306/nonexistent_database";
        String username = "username";
        String password = "password";

        try {
            // Attempt to connect to the database
            Connection connection = DriverManager.getConnection(url, username, password);

            // Attempt to execute a SQL query
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM nonexistent_table");

            // Process the result set (not reached in this example)
            while (resultSet.next()) {
                // Process each row of the result set
            }

            // Close resources
            resultSet.close();
            statement.close();
            connection.close();
        } catch (SQLException e) {
            // Handle the exception
            System.err.println("SQLException caught: " + e.getMessage());
        }
    }
}
